/**
 * @Section Nuclear attraction integrals between different Shell-types (e.g. s, p, d, f)
 * ------------------------------------------------------------------------------------
 * The benefits of this is due to loop unrolling and compiler optimization.
 * The disadvantages is the increase in probability of error and code bloating.
 *
 * @notes Generated by "generate_integrals.py" file. With a bit of copy-pasting.
 */
#include "../include/integral_coeffs.cuh"
#include "../include/cuda_utils.cuh"

#include <stdio.h>
__device__ double gbasis::compute_s_s_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_px_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_py_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_pz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_s_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_px_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_py_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_pz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_px_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_py_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_pz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_py_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_pz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_pz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<5, 2, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxx_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_dyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 2, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 5, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyy_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_dzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 2, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 5>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dzz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_dxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxy_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_dxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 1, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dxz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_dyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 0, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 1, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 1, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_dyz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxxx_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<5, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<6, 3, 3>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 6, 0, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 0, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<5, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<5, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 1, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<5, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<5, 3, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 5, 0, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxx_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 3, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fyyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 5, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<6, 3, 3>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 6, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 0, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 5, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 5, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 5, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<5, 3, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 5, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyy_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 3, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fzzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 5>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<6, 3, 3>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 6>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 0, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 5>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 5>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 5>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<5, 3, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 5>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fzzz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 3, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fxyy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 4, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 3, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 1, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 4, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyy_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fxxy_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 0>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 2, 0>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 1, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 0, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 3, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxy_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 0, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 2, 1>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxz_fxxz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<4, 2, 2>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 4, 0, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 1, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxxz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<3, 2, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 3, 1, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxzz_fxzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 0>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxzz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxzz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 0, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxzz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 0, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyzz_fyzz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 4>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<4, 2, 2>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 4>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyzz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 1, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyzz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 3>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<3, 2, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 3>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyz_fyyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 0>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<4, 2, 2>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 4, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fyyz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 3, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 0, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<3, 2, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 3, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
__device__ double gbasis::compute_fxyz_fxyz_nuclear_attraction_integral(const double& alpha, const double3& A_coord, const double& beta, const double3& B_coord, const double3& pt, const double3& P)
{
    double output = gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<0, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 0, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<1, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 1, 2, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<0, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 0, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<1, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 1, 2>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<0, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 0>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<1, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 1>(alpha, P, beta, pt);
    output += gbasis::E<2, 1, 1>(alpha, A_coord.x, beta, B_coord.x) *  gbasis::E<2, 1, 1>(alpha, A_coord.y, beta, B_coord.y) *  gbasis::E<2, 1, 1>(alpha, A_coord.z, beta, B_coord.z) *  gbasis::R<0, 2, 2, 2>(alpha, P, beta, pt);
    return output * (2.0 * CUDART_PI_D) / (alpha + beta);
}
